import pandas as pd

def profit_exit(cum_rets, limit):
    exit_dates = cum_rets[(cum_rets >= limit)]
    
    if exit_dates.empty: return None
    
    return exit_dates.index[0]

def stop_loss_exit(cum_rets, limit):
    exit_dates = cum_rets[(cum_rets <= limit)]
    
    if exit_dates.empty: return None
    
    return exit_dates.index[0]

def calculate_trade(entry_date, is_long, returns, pt, sl, tl):
    entry_idx = returns.index.get_loc(entry_date)
    exit_idx = min(entry_idx + tl, len(returns) - 1)
    max_date = returns.index[exit_idx]
    cum_rets = returns.iloc[entry_idx + 1:exit_idx + 1].cumsum()
    
    if not is_long:
        # flip the sign for short position
        cum_rets *= -1
    
    pt_exit_date = profit_exit(cum_rets, pt)
    sl_exit_date = stop_loss_exit(cum_rets, sl)
    
    if not pt_exit_date and not sl_exit_date:
        exit_date = max_date
    elif pt_exit_date is None:
        exit_date = sl_exit_date
    elif sl_exit_date is None:
        exit_date = pt_exit_date
    else:
        exit_date = min(pt_exit_date, sl_exit_date)
    
    return {
        'entry': entry_date,
        'exit': exit_date,
        'ret': cum_rets.loc[exit_date],        
        'posday': exit_date - entry_date,
        'maxdate': max_date,
        'maxret': cum_rets.max(),
        'holdret': cum_rets.iloc[-1]
        
        
    }
def calculate_trades(returns, events, pt, sl, tl):
    trades = map(lambda e: calculate_trade(e[0], e[1], returns, pt, sl, tl), events)
    colnames = ['entry', 'exit', 'ret', 'posday', 'maxdate', 'maxret', 'holdret']
    return pd.DataFrame(trades, index=events, columns=colnames)

def triple_barrier_method(returns, events, pt, sl, tl):
    returns = returns.copy()
    trades = calculate_trades(returns, events, pt, sl, tl)
    return trades




# Prepare input data
returns = pd.DataFrame({
    'Date': pd.date_range(start='2022-01-01', periods=100),
    'Return': [0.01, -0.02, 0.03, -0.01, 0.02] * 20  # Example daily returns
})

returns["Date"] = returns["Date"].dt.date
returns = returns.set_index('Date')  # Set 'Date' column as the index

event_dates = pd.to_datetime(['2022-01-01', '2022-01-15', '2022-01-25']).date
positions = [True, False, True] 

events = list(zip(event_dates, positions))



profit_taking = 0.01
stop_loss = -0.04
time_limit = 6

# Call triple_barrier_method function
trades = triple_barrier_method(returns["Return"], events, profit_taking, stop_loss, time_limit)

# Inspect the trades DataFrame
print(trades)




import pandas as pd
from collections import defaultdict

# Example dataframe
df = pd.DataFrame({
    'symbol': ['AAPL', 'AAPL', 'GOOGL', 'GOOGL', 'MSFT'],
    'date': ['2023-01-05', '2023-01-10', '2023-01-15', '2023-01-20', '2023-01-25'],
    'islong': [True, False, True, False, True]
})

df["date"] = pd.to_datetime(df['date'])

events_dict = defaultdict(list)

events = df.apply(lambda row: (row['symbol'], row['date'], row['islong']), axis=1)
_ = events.apply(lambda event: events_dict[event[0]].append((event[1], event[2])))

events_dict = dict(events_dict)

print(events_dict)


